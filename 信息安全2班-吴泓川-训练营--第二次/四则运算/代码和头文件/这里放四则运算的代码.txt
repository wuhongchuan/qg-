#include <stdio.h>  
#include <stdlib.h>  
 
typedef enum Status
{
	ERROR = 0, OK = 1
}Status;

typedef int ElemType;

typedef struct StackNode  
{  
    ElemType data;  
    struct StackNode *next;  
}StackNode, *LinkStackPtr;  
  
typedef struct linkStack  
{  
    LinkStackPtr top;     //栈顶指针
    int count;            //栈中元素个数
}LinkStack;  
  
Status initLStack(LinkStack *s)  
{  
    s->top = NULL;  
    s->count = 0;  
    return OK;  
}  

Status isEmptyLStack(LinkStack *s)  //判断链表是否为空
{
	if (s->count == 0)
	{
		return OK;
	}
	else
	{
		return ERROR;
	}
}
  
Status pushLStack(LinkStack *s, ElemType datas)    //入栈 
{  
    StackNode *p = (StackNode *)malloc(sizeof(StackNode));  
    if(p == NULL)  
    {  
        return ERROR;  
    }  
    p->data = datas;  
    p->next = s->top;  
    s->top = p;  
    s->count++;  
    return OK;  
}  
  
int getTopLStack(LinkStack *s)            //获取链表头元素 
{  
    if(NULL == s->top)  
    {  
        return ERROR;  
    }  
    return (s->top->data);  
}  
  
int Prior(char s)  
{  
    switch(s)  
    {  
        case '(':  
            return 3;  
        case '*':  
        case '/':  
            return 2;  
        case '+':  
        case '-':  
            return 1;  
        default:  
            return 0;  
    }  
}  
  
int popLStack(LinkStack *s)  
{  
    int e;  
    if(NULL == s->top)  
    {  
        return ERROR;  
    }    
    StackNode *p = s->top;  
    e = p->data;  
    s->top = p->next;  
    free(p);  
    s->count--;  
    return e;  
}  
  
int main()  
{  
    LinkStack num, op;  
    char str[1000]={0};  
    int i = 0, temp = 0, j;  
    if(initLStack(&num) != OK || initLStack(&op) != OK)  
    {  
        printf("初始化失败啦!\n");   
    }  
   	printf("输入算式：\n");
    scanf("%s",str);  
    while(str[i] != '\0' || isEmptyLStack(&op) != OK)  
    {  
        if(str[i] >= '0' && str[i] <= '9')         //如果接下来的字符在0~9之间 
        {  
            temp = temp * 10 + str[i] - '0';      //让字符强制转化为数字，把各个位乘10相加 
            i++;  
            if(str[i] < '0' || str[i] > '9')  
            {  
                pushLStack(&num,temp);  
                temp = 0;  
            }  
        }  
        else  
        {  
            if((isEmptyLStack(&op) == OK) || (getTopLStack(&op) == '(' && str[i] != ')') || Prior(str[i]) > Prior(getTopLStack(&op)))      
            {   //如果栈不是空的，或者栈顶元素是左括号但是接下来不是又括号，或者接下来的符号优先级大于栈顶符号优先级  
                pushLStack(&op,str[i]);     //就把接下来的符号推进去 
                i++;  
                continue;  
            }  
            if(getTopLStack(&op) == '(' && str[i] == ')')                                              
            {  //如果栈顶元素是左括号并且接下来的是右括号，就把左括号踢出去  
                popLStack(&op);  
                i++;  
                continue;  
            }  
            if((str[i] == '\0' && isEmptyLStack(&op) != OK) || (str[i] == ')' && getTopLStack(&op) != '(') || Prior(str[i]) <= Prior(getTopLStack(&op)))
            { // 如果接下来的是停止符且不是空栈，或者接下来的是右括号且栈顶元素不是左括号，或者下来的符号优先级不大于栈顶符号优先级，就进行以下操作 
                switch(popLStack(&op))  
                {  
                    case '+':        //加号的话踢出两个数直接相加 ，再推进去
                        pushLStack(&num, popLStack(&num) + popLStack(&num));  
                        break;  
                    case '-':       //减号的话，先踢一个赋给j，然后再踢出一个数用来减去j ，再推进去
                        j = popLStack(&num);  
                        pushLStack(&num, popLStack(&num) - j);  
                        break;  
                    case '*':       //乘号的话踢出两个数直接相乘，再推进去 
                        pushLStack(&num, popLStack(&num) * popLStack(&num));  
                        break;   
                    case '/':        //除号的话，先踢一个赋给j，然后再踢出一个数用来除以j ，再推进去
                        j = popLStack(&num);  
                        pushLStack(&num, popLStack(&num) / j);  
                }  
                continue;  
            }  
        }  
    }  
    printf("%d",popLStack(&num));    //最后踢出来的就是答案了 
    printf("\n");  
  	system("pause");
    return 0;  
}

//总结的一些理解
//①运算数：直接输出
②左括号：丢进栈
③右括号：将栈顶运算符弹出并输出，直到遇到左括号。
④运算符：若当前优先级大于栈顶运算符时，把它丢进栈；若当前优先级小于栈顶运算符时，将栈顶运算符弹出并输出；再比较新的栈顶运算符，直到当前运算符大于栈顶运算符优先级为止，然后把当前运算符丢进栈。

//当把左括号扔到栈里，它的优先级将会降到最低，当碰到右括号时，把栈顶的运算符号一个一个抛出来，直到碰到左括号为止。同一个优先级，从左到右。
